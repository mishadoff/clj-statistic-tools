#include <stdio.h>
#include <memory.h>
#include <algorithm>
#include <vector>
using namespace std;
const int kBase = 1<<17;
const int kTreeSz = kBase<<1;
const int inf = 987654321;

int Minima[kTreeSz];
int Mark[kBase];
int n,k,a,b,c,r;

void setValue(int pos,int val)
{
	pos += kBase;
	Minima[pos]=val;
	pos>>=1;
	for (;pos;pos>>=1)
		Minima[pos] = min(Minima[pos*2],Minima[pos*2+1]);
}

void mark(int v)
{
	if (v>k) return;
	Mark[v]++;
	if (Mark[v]) setValue(v,inf);
}

void unmark(int v)
{
	if (v>k) return;
	Mark[v]--;
	if (!Mark[v]) setValue(v,v);
}


int main()
{
	freopen("find_the_mintxt.txt","r",stdin);
	freopen("fmin.txt","w",stdout);
	int T;scanf("%d",&T);
	for (int kase=1;kase<=T;++kase)
	{
		scanf("%d %d %d %d %d %d",&n,&k,&a,&b,&c,&r);

		long long last = a;
		vector<int> m;
		
		//init tree
		memset(Mark,0,sizeof(Mark));
		for (int i=1;i<kTreeSz;++i) Minima[i] = inf;
		for (int i=0;i<=k;++i) setValue(i,i);

		mark(last);
		m.push_back(last);

		for (int i=1;i<k;++i)
		{
			last = (b*last+c)%r;
			mark(last);
			m.push_back(last);
		}

		for (int i=k;i<=3*k;++i)
		{
			if (i>k) unmark(m[i-k-1]);
			int v = Minima[1];
			mark(v);
			m.push_back(v);
		}

		printf("Case #%d : %d\n",
			kase, m[k + (n-1-k) % (k+1)]);

	}
	
	return 0;
}