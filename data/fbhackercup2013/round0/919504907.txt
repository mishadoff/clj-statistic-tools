#include <iostream>
#include <set>
#include <map>

using namespace std;

typedef unsigned long long ull;
typedef set<int> si;
typedef map<int, int> mii;

int n, k, a, b, c, r;

#define LIM 100000

int orig[2*LIM+1];
int ans[LIM+1];

int solve() {
    si allowed;
    mii freq;
    
    for (int i = 0; i <= k; i++) {
        allowed.insert(i);
    }
    
    orig[0] = a;
    freq[a] = 1;
    allowed.erase(a);
    for (int i = 1; i < k; i++) {
        ull tmp = ((ull) b) * ((ull) orig[i-1]) + ((ull) c);
        tmp %= (ull) r;
        
        orig[i] = (int) tmp;
        
        if (freq.count(orig[i]))
            freq[orig[i]] += 1;
        else
            freq[orig[i]] = 1;
        
        allowed.erase(orig[i]);
    }
    
    // Sliding window
    ans[0] = *allowed.begin();
    orig[k] = ans[0];
    for (int i = 1; i <= k; i++) {
        // Dissallow i-1 in ans
        if (freq.count(ans[i-1]))
            freq[ans[i-1]] += 1;
        else
            freq[ans[i-1]] = 1;
        
        if (allowed.count(ans[i-1]))
            allowed.erase(ans[i-1]);
        
        // Maybe allow i-1 in orig
        freq[orig[i-1]] -= 1;
        if (!freq[orig[i-1]])
            allowed.insert(orig[i-1]);
        
        // Get minimum
        ans[i] = *allowed.begin();
        orig[k+i] = ans[i];
    }
    
    return ans[(n-k-1)%(k+1)];
}

int main() {
    int t;
    cin >> t;
    
    for (int i = 1; i <= t; i++) {
        cin >> n >> k >> a >> b >> c >> r;
        cout << "Case #" << i << ": " << solve() << endl;
    }
    return 0;
}

