#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstdio>


using namespace std;


typedef long long ll;

const int MAX_K = 100000 * 2;
/*
struct DB{
	vector<int> list;
	DB(){
		list = vector<int>();
	}
	void add( int v ){
		list.push_back(v);
	} 
	void del( int v ){
		for( int i = 0; i < (int)list.size(); i++ )
			if ( list[i] == v ){
				list[i] = list[ (int)list.size()-1 ];
				list.pop_back();
				return;
			}
	}
	int min_exclusive(){
		vector<int> single( list );
		sort(single.begin(),single.end());
		single.resize( unique(single.begin(),single.end()) - single.begin() );

		int i = 0;
		while ( i < (int)single.size() && single[i] == i )
			i++;
		return i;
	}

};
*/

struct Node{
	int k,length; // k in [0..30]  l = 2^k
	int prefix;   // prefix of number
	Node *left, *right; // left & right son
	int counter; // counter
	int diff; // number of different numbers
	Node( int _k=0, int _prefix=0 ):
		k(_k), 
		length(1<<_k), 
		prefix(_prefix),
		left(NULL), 
		right(NULL), 
		counter(0),
		diff(0) {}
};

struct DB{
	Node *root;

	DB(){
		root = new Node( 30, 0 );
	}

#define touch do{														\
		if ( p->left == NULL )											\
			p->left = new Node( p->k-1, p->prefix );					\
		if ( p->right == NULL )											\
			p->right = new Node( p->k-1, p->prefix + (1<<(p->k-1)) );	\
		} while ( false );

#define TEST_BIT(v,i) (((v)>>(i))&1)

#define FULL(p) (((p)->diff)==((p)->length)) 

	void modify( Node * p, int v, int delta ){
		if ( p->k == 0 ){ // leaf
			p->counter += delta;
			p->diff = !! (p->counter);
			return;
		}

		touch;

		if ( !TEST_BIT(v,p->k-1) )
			modify( p->left, v, delta );
		else
			modify( p->right, v, delta );

		p->counter = p->left->counter + p->right->counter;
		p->diff = p->left->diff + p->right->diff;
	}
	void add( int v ){
		modify( root, v, +1 );
	}
	void del( int v ){
		modify( root, v, -1 );
	}
	int find( Node * p ){
		if ( p->k == 0 )
			return p->prefix;
		touch;
		if ( FULL(p->left) )
			return find( p->right );
		else
			return find( p->left );
	}
	int min_exclusive(){
		return find( root );
	}
};

int k,n;
ll a,b,c,r;
int s[MAX_K];

const int MAX_Q = MAX_K + 1;
int queue[MAX_Q], st, ed;

void go( int Case ){
	cin >> n >> k;
	cin >> a >> b >> c >> r;

	s[0] = a;
	for( int i = 1; i < k; i++ )
		s[i] = ( b*s[i-1] + c ) % r;

	DB db;
	for( int i = 0; i < k; i++ )
		db.add( s[i] );

	st = ed = 0;
	for( int i = 0; i < k; i++ )
		queue[ed++] = s[i];

	int new_v;
	int new_n = n - (n-(k+1))/(k+1)*(k+1) + 10*(k+1);
	new_n = min( new_n, n );

	for( int i = k; i < new_n; i++ ){
		new_v = db.min_exclusive();
		
		db.add( new_v );
		db.del( queue[st] );
		queue[ed++] = new_v;
		if ( ed == MAX_Q )
			ed = 0;
		st++;
		if ( st == MAX_Q )
			st = 0;
	}

	cout << "Case #"<<Case<<": "<<new_v<<endl;
}

int main(){
	int C;
	cin >> C;
	for(int Case = 1; Case <= C; Case ++ ){
		go( Case );
	}
	return 0;
}