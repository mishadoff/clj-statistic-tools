#pragma comment(linker, "/STACK:16777216")
#pragma warning(disable:4786)

#include <set>
#include <map>
#include <list>
#include <cmath>
#include <stack>
#include <queue>
#include <deque>
#include <ctime>
#include <bitset>
#include <vector>
#include <cstdio>
#include <cctype>
#include <string>
#include <utility>
#include <cstring>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <iomanip>
#include <fstream>
#include <numeric>
#include <iterator>
#include <iostream>
#include <algorithm>
#include <functional>

using namespace std;

#define MAX_SIZE 100100
#define MAX_LENGTH 300100
#define INF ( 1 << 29 )

#define CLR( a ) memset( a , NULL , sizeof( a ) )
#define MEM( a ) memset( a , -1 , sizeof( a ) )
#define fort( a , b ) for( ind = ( a ) ; ind <= ( b ) ; ind++ )
#define foriab( a , b ) for( i = ( a ) ; i < ( b ) ; i++ )
#define fori( a ) for( i = 0 ; i < ( a ) ; i++ )
#define forj( a ) for( j = 0 ; j < ( a ) ; j++ )
#define print1( a ) printf( "%lld ---\n" , ( a ) )
#define print2( a , b ) printf( "%lld %lld ---\n" , ( a ) , ( b ) )

typedef long long lll ;

int MIN( int a , int b ) { return a < b ? a : b ; }
int MAX( int a , int b ) { return a > b ? a : b ; }
int GCD( int a , int b ) { while( b ) b ^= a ^= b ^= a %= b ; return a ; }
int LCM( int a , int b ) { return a * ( b / GCD( a , b ) ) ; }
void SWAP( int &a , int &b ) { a = a ^ b ; b = a ^ b ; a = a ^ b ; }

const double PI = acos( -1 ) ;
const double EPS = 1e-11 ;

lll arr[ MAX_LENGTH ] , crr[ MAX_LENGTH ] , idx[ MAX_LENGTH ] , N , brr[ MAX_LENGTH ] ;
map< lll , lll > M ;
lll m_cnt ;

lll query( lll x ) {
    lll i , res ;
    res = 0 ;
    for( i = x ; i >= 1 ; i -= ( i & - i ) ) {
        res = ( res + crr[ i ] ) ;
    }
    return res ;
}

void insert_bit( lll x ) {
    lll i ;
    for( i = x ; i < MAX_LENGTH ; i += ( i & - i ) ) {
        crr[ i ]++ ;
    }
}

void delet_bit( lll x ) {
    lll i ;
    for( i = x ; i < MAX_LENGTH ; i += ( i & - i ) ) {
        crr[ i ]-- ;
    }
}

void insert( lll a ) {
    if( M.find( a ) == M.end() ) {
        M[ a ] = m_cnt++ ;
        if( a < 3e5 ) {
            insert_bit( a + 1 ) ;
        }
    }
    idx[ M[ a ] ]++ ;
}

void delet( lll a ) {
    assert( idx[ M[ a ] ] ) ;
    idx[ M[ a ] ]-- ;
    if( ! idx[ M[ a ] ] ) {
        assert( M.find( a ) != M.end() ) ;
        M.erase( M.find( a ) ) ;
        if( a < 3e5 ) {
            delet_bit( a + 1 ) ;
        }
    }
}

lll find_v() {
    lll i , re , a , b , c , l , h , m ;
    re = -1 ;
    l = 0 ;
    h = MAX_LENGTH - 1 ;
    fori( 100 ) {
        if( l < 0 || h >= MAX_LENGTH || l > h ) { break ; }
        m = ( l + h ) / 2 ;
        a = query( m + 1 ) ;
        if( a == m + 1 ) {
            l = m + 1 ;
        }
        else {
            re = m ;
            h = m - 1 ;
        }
    }
    return re ;
}

int main() {
    freopen( "c.in" , "r" , stdin ) ;
	freopen( "main_out.txt" , "w" , stdout ) ;
	lll T , res , n , i , ind , k , a , b , c , r , j , cn ;
	scanf( "%lld" , &T ) ;
	fort( 1 , T ) {
		scanf( "%lld" , &n ) ;
		scanf( "%lld" , &k ) ;
		scanf( "%lld" , &a ) ;
		scanf( "%lld" , &b ) ;
		scanf( "%lld" , &c ) ;
		scanf( "%lld" , &r ) ;
		MEM( arr ) ;
		CLR( idx ) ;
		CLR( crr ) ;
		N = k + 1 ;
		arr[ 0 ] = a ;
		for( i = 1 ; i < k ; i++ ) {
		    arr[ i ] = ( ( b * arr[ i - 1 ] ) % r + c ) % r ;
		}
		M.clear() ;
		m_cnt = 1 ;
		fori( k ) {
		    insert( arr[ i ] ) ;
		}
		j = 0 ;
		cn = 0 ;
		for( i = k ; i < k + N ; i++ ) {
		    a = find_v() ;
		    assert( a != -1 ) ;
		    arr[ i ] = a ;
		    brr[ cn++ ] = a ;
		    insert( arr[ i ] ) ;
		    delet( arr[ j ] ) ;
		    j++ ;
		}
		if( n - 1 < k ) {
		    res = arr[ n - 1 ] ;
		}
		else {
		    n = ( n - k - 1 + N ) % N ;
		    res = brr[ n ] ;
		}
		printf( "Case #%lld: %lld\n" , ind , res ) ;
	}
	return 0 ;
}
