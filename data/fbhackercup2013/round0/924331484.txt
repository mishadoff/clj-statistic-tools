#include <cstring>
#include <set>
#include <algorithm>
#include <map>
#include <vector>
using namespace std;
#include <iostream>
#include <string>
#include <cstdio>

//By chyx111
#define FORPAIR(a, b, v)\
	for(__typeof__(v.begin()) _it = v.begin(); _it != v.end(); ++_it)\
for(bool _once1 = true, _once2 = true, _done = false; _once1 && _once2; (!_done) ? (_it=v.end(), --_it) : _it )\
for(__typeof__(_it->first) & a = _it->first; _once1 && !(_once1 = false); )\
for(__typeof__(_it->second) & b = _it->second; _once2 && !(_once2 = false); _done = true)
#define ALL(a) (a).begin(), (a).end()
#define SZ(a) ((int)(a).size())
#define DBG(a) do{std::cerr << #a << ": " << (a) << std::endl;}while(0)
#define REP(i,n) for(int n_##__LINE__ = (n), i = 0; i < n_##__LINE__; ++i)
#define FORE(elem,v)\
	for(__typeof__(v.begin()) _it = v.begin(); _it != v.end(); ++_it)\
for(int _once=1, _done=0; _once; (!_done) ? (_it=v.end(), --_it) : _it )\
for(__typeof__(*_it) & elem = * _it; _once && !(_once=0); _done=1)

int const kMaxn = 128;
int dp[kMaxn][kMaxn];

int main()
{
	int ca;
	scanf("%d", &ca);
	string input;
	getline(cin, input);
	REP(ica, ca){
		getline(cin, input);
		int prev = -1;
		memset(dp, 0, (sizeof dp));
		dp[0][0] = true;
		REP (r, SZ(input)) {
			int ch = input[r];
			if(ch == '('){
				REP (i, kMaxn)if(dp[r][i]){
					dp[r + 1][i + 1] = true;
				}
				REP (i, kMaxn) if(dp[r][i] && r > 0 && input[r - 1] == ':'){
					dp[r + 1][i] = true;
				}
			}else if(ch == ')'){
				REP (i, kMaxn)if(dp[r][i] && i > 0){
					dp[r + 1][i - 1] = true;
				}
				REP (i, kMaxn) if(dp[r][i] && r > 0 && input[r - 1] == ':'){
					dp[r + 1][i] = true;
				}
			}else if('a' <= ch && ch <= 'z' || ch == ':' || isspace(ch)){
				REP (i, kMaxn) {
					dp[r + 1][i] = dp[r][i];
				}
			}
#if 0
			if(ch == '(' || ch == ')' || ch == ':'){
				REP (i, kMaxn) if(dp[r + 1][i]){
					std::cout << i << " ";
				}
				std::cout << std::endl;
			}
#endif
		}
		printf("Case #%d: %s\n", ica + 1, dp[SZ(input)][0] ? "YES" : "NO");
	}
	return 0;
}

