import heapq

m = int(raw_input())
teste = 1

for x in xrange(m):
    n, k = map(int,raw_input().split())
    a,b,c,r = map(int,raw_input().split())

    n -= 1

    arr = []
    arrs = {}

    arr.append(a)
    arrs[arr[0]] = arrs.get(arr[0],0)+1

    for i in xrange(1, k):
        arr.append((b * arr[i-1] + c) % r)
        arrs[arr[i]] = arrs.get(arr[i],0)+1

    r = [x for x in range(k+1) if x not in arrs]
    heapq.heapify(r)

    for x in xrange(k+1):
        new_element = heapq.heappop(r)
        arr.append(new_element)
        arrs[new_element] = 1

        arrs[arr[x]] -= 1
        if (arrs[arr[x]] == 0):
            heapq.heappush(r, arr[x])

    #for x in xrange(2*k):
    #    print arr[x],
    #print
    if n < len(arr): print "Case #%s: %s" % (teste, arr[n])
    else: print "Case #%s: %s" % (teste, arr[(n-k)%(k+1) + k])
    
    teste+=1


