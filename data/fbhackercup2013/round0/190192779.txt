import java.util.*;

public class FindTheMin {
	public static void main(String[] args){
		Scanner reader = new Scanner(System.in);
		int T = reader.nextInt();
		for(int t = 1; t <= T; t++){
			int n = reader.nextInt();
			int k = reader.nextInt();
			long a = reader.nextInt();
			long b = reader.nextInt();
			long c = reader.nextInt();
			long r = reader.nextInt();
			
			int[] s = new int[2*k+1];
			s[0] = (int)a;
			for(int i = 1; i < k; i++)
				s[i] = (int)((b * s[i-1] + c) % r);

			TreeSet<Pair> set = new TreeSet<Pair>();
			Pair[] f = new Pair[2*k+1];
			
			for(int i = 0; i <= 2*k; i++)
				f[i] = new Pair(i,0);
			
			for(int i = 0; i < k; i++)
				if(s[i] <= 2*k)
					f[s[i]].f++;
			
			for(int i = 0; i < 2*k+1; i++)
				set.add(f[i]);
			
			for(int i = k; i < 2*k+1; i++){
				Pair get = set.first();
				set.remove(get);
				
				s[i] = get.n;
				
				if(s[i-k] <= 2*k){
					Pair rem = f[s[i-k]];
					set.remove(rem);
					rem.f--;
					set.add(rem);
				}
				
				get.f++;
				set.add(get);
			}
			
			int j = (n-k-1)%(k+1);	
			System.out.println("Case #"+t+": "+s[k+j]);
		}
	}
	
	public static class Pair implements Comparable<Pair>{
		int f,n;
		public Pair(int _n, int _f){
			n = _n;
			f = _f;
		}
		public int compareTo(Pair p){
			if(f == p.f)
				return n-p.n;
			return f-p.f;
		}
	}
}
