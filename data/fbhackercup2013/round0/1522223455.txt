#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <stack>
#include <iostream>
#include <sstream>
#include <bitset>

using namespace std;

#define inf (1<<29)
#define eps (1e-9)

#define flt(x,y) ((x)<(y)-eps)
#define fgt(x,y) flt(y,x)
#define fle(x,y) !fgt(x,y)
#define fge(x,y) !flt(x,y)
#define feq(x,y) (fabs((x)-(y))<eps)

#define PB push_back
#define MP make_pair

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long LL;
typedef pair<int,int> PII;


LL x[100005];
LL p[100005];
int used[100005];
LL n, k, a, b, c, r;
priority_queue<LL, vector<LL>, greater<LL> > q;

int main()
{
	int T;
	scanf ("%d", &T);
	for (int cc = 1; cc <= T; cc++) {
		cin >> n >> k;// >> endl;
		cin >> a >> b >> c >> r; // >> endl;

		memset(x, 0, sizeof(x));
		memset(used, 0, sizeof(used));
		while (!q.empty()) q.pop();

		x[0] = a;
		if (x[0] <= k) used[x[0]]++;
		for (int i = 1; i < k; i++) {
			x[i] = (b * x[i-1] + c) % r;
			if (x[i] <= k) {
				used[x[i]]++;
			}
		}

		for (int i = 0; i <= k; i++) {
			if (used[i] == 0) {
				q.push(i);
			}
		}

		for (int i = 0; i < k; i++) {
			p[i] = q.top();
			q.pop();
			if (x[i] <= k) used[x[i]]--;
			if (p[i] <= k) used[p[i]]++;
			if (x[i] <= k && used[x[i]] == 0) {
				q.push(x[i]);
			}
		}
		p[k] = q.top();
		cout << "Case #" << cc << ": " << p[n%(k+1)] << endl;
	}
	return 0;
}
