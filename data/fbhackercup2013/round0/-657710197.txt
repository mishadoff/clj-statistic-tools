import java.util.*;
import java.io.*;

public class FindMin {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader("input.txt"));
		PrintWriter out = new PrintWriter(new FileWriter("output.txt"));
		
		int T = Integer.parseInt(br.readLine());
		for(int t = 0; t < T; t++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			long n = Long.parseLong(st.nextToken());
			int k = Integer.parseInt(st.nextToken());

			st = new StringTokenizer(br.readLine());
			long a = Long.parseLong(st.nextToken());
			long b = Long.parseLong(st.nextToken());
			long c = Long.parseLong(st.nextToken());
			long r = Long.parseLong(st.nextToken());
			
			TreeSet<Integer> s = new TreeSet<Integer>();
			Queue<Integer> list = new LinkedList<Integer>();
			HashMap<Integer, Integer> lastOc = new HashMap<Integer, Integer>();

			long m = a;
			lastOc.put((int)m, 0);
			list.add((int)m);
			for(int i = 1; i < k; i++) {
				m = (b * m + c) % r;
				list.add((int)m);
				lastOc.put((int)m, i);
			}
			for(int i = 0; i <= k; i++) {
				if(!lastOc.containsKey(i)) {
					s.add(i);
				}
			}
			int i = k;
			boolean fin = false;
			int start = -1;
			int ans = -1;
			ArrayList<Integer> all = new ArrayList<Integer>(10*k);
			ArrayList<Integer> res = new ArrayList<Integer>(2*k);
			while(true) {
				int next = s.first();
				if(fin) {
					res.add(next);
				}
				
				all.add(next);
				list.add(next);
				
				if(i == n-1) {
					ans = next;
					break;
				}
				if(res.size() == k+1) {
					break;
				}
				
				s.pollFirst();
				
				if(list.peek() <= k) {
					if(!lastOc.containsKey(list.peek()) || lastOc.get(list.peek()) <= i-k)
						s.add(list.peek());
				}
				list.poll();
				
				if(s.size() == 1 && !fin) {
					fin = true;
					start = i+1;
				}
				
				i++;
			}
			if(ans == -1) {
				ans = res.get(((int)n-1-start) % (k+1)); 
			}
			out.println("Case #" + (t+1) + ": " + ans);	
		}
		out.close();
	}
}