#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define eps 1e-9
#define FOR(x, s, e) for(int x = (s); x < (e); ++x)
#define FORc(x, s, e, c) for(int x = (s); x < (e) && (c); ++x)
#define STEP(x, s, e, d) for(int x = (s); x < (e); x+=(d))
#define ROF(x, s, e) for(int x = (s); x >= (e); --x)
#define ROFc(x, s, e, c) for(int x = (s); x >= (e) && (c); --x)
#define FOREACH(container, it) \
   for(typeof(container.begin()) it=container.begin(); it!=container.end(); it++)
#define EXP(i, s) for (int i = (s); i; i = qn[i])
#define vb vector<bool>
#define vi vector<int>
#define vii vector<pair<int, int> >
#define vs vector<string>
#define pb push_back
#define mp make_pair
#define ALL(X) X.begin(), X.end()
#define LL long long
#define pii pair<int, int>
#define x first
#define y second
#define gcd(x, y) __gcd((x), (y))
#define countbit(x) __builtin_popcount(x)

using namespace std;

int main(int argc, char **argv){
  int T;
  cin >> T;
  char line[10000];
  gets(line);
  FOR(ca, 0, T){
    printf("Case #%d: ", ca+1);
    gets(line);
    int N = strlen(line);
    bool dp[N+1][N+1];
    memset(dp, 0, sizeof(dp));
    dp[0][0] = 1;
    string s = line;
    FOR(i, 1, N+1)
      if (s[i-1] == '('){
        FOR(j, 0, N+1){
          if (j - 1 >= 0) dp[i][j] |= dp[i-1][j-1];
          if (i>1 && s[i-2] == ':') dp[i][j] |= dp[i-1][j];
        }
      }else if (s[i-1] == ')'){
        FOR(j, 0, N+1){
          if (j + 1 <= N) dp[i][j] |= dp[i-1][j+1];
          if (i > 1 && s[i-2] == ':') dp[i][j] |= dp[i-1][j];
        }
      }else{
        FOR(j, 0, N+1) dp[i][j] |= dp[i-1][j];
      }
    bool ok = dp[N][0];
    puts(ok?"YES":"NO");
  }
  return 0;
}
