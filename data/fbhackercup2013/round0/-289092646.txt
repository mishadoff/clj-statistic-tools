#include <iostream>
#include <cstring>
#include <cstdio>
#include <algorithm>
using namespace std;

const long long inf = 10000000000000LL;
typedef long long LL;

struct BIT {
    LL c[100010], n;
    BIT(LL _n) {
        memset(c, 0, sizeof(c));
        n = _n;
    }
    BIT() {}
    LL lowbit(LL x) {
        return (x & (-x));
    }
    void insert(LL k, LL delta) {
        while (k <= n) {
            c[k] += delta;
            k += lowbit(k);
        }
    }
    LL getsum(LL k) {
        LL s = 0;
        while (k) {
            s += c[k];
            k -= lowbit(k);
        }
        return s;
    }
};

int main() {
    LL T, a, b, c, r, n, k;
    static LL m[300010], cnt[100010];
    freopen("c.in", "r", stdin);
    freopen("c.out", "w", stdout);
    scanf("%lld", &T);
    for (LL ca = 1; ca <= T; ++ca) {
        scanf("%lld%lld%lld%lld%lld%lld", &n, &k, &a, &b, &c, &r);
        //printf("%lld\n", k);
        memset(cnt, 0, sizeof(cnt));
        m[0] = a;
        for (LL i = 1; i < k; ++i) {
            m[i] = (b * m[i-1] + c) % r;
        }
        for (LL i = 0; i < k; ++i)
            if (m[i] > k) m[i] = k + 1;
        for (LL i = 0; i < k; ++i) m[i]++;
        for (LL i = 0; i < k; ++i)
            cnt[m[i]]++;
        BIT b(k+2);
        for (LL i = 1; i <= k + 2; ++i)
            if (cnt[i]) b.insert(i, 1);
        for (LL i = k; i < 3 * k; ++i) {
            if (!cnt[1]) {
                m[i] = 1;
                cnt[m[i]]++;
                if (cnt[m[i]] == 1) b.insert(m[i], 1);
                cnt[m[i-k]]--;
                if (cnt[m[i-k]] == 0) b.insert(m[i-k], -1);
                continue;
            }
            LL left = 1, right = k + 2, mid;
            while (left < right) {
                if (left + 1 == right) {
                    if (b.getsum(right) == right) left = right;
                    break;
                }
                mid = (left + right + 1) >> 1;
                if (b.getsum(mid) == mid) left = mid;
                else right = mid - 1;
            }
            m[i] = left + 1;
            cnt[m[i]]++;
            if (cnt[m[i]] == 1) b.insert(m[i], 1);
            cnt[m[i-k]]--;
            if (cnt[m[i-k]] == 0) b.insert(m[i-k], -1);
        }
        //if (n <= 3 * k) prLLf("Case #%lld: %lld\n", ca, m[n-1]-1);
        /*else*/ {
            n %= (k + 1);
            if (n < k + 1) n += k + 1;
            printf("Case #%lld: %lld\n", ca, m[n-1]-1);
        }
    }
    return 0;
}
