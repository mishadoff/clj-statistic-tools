#include <stdio.h>
#include <inttypes.h>
#include <stdint.h>
#include <cassert>
#include <set>

using namespace std;

inline unsigned next(unsigned x, unsigned b, unsigned c,
                          unsigned r) {
  return ((unsigned long long)b * x + c) % r;
}

#define MAX_K 100000
unsigned m[MAX_K*2+1];

unsigned last(unsigned n, unsigned k, unsigned a,
                   unsigned b, unsigned c, unsigned r) {
  unsigned i, x;
  typedef multiset<unsigned> MultiUnsignedSet;
  typedef set<unsigned> UnsignedSet;
  MultiUnsignedSet ms;
  UnsignedSet s;
  for (i = 0; i < k + 1; i++)
    s.insert(i);

  for (i = 0, x = a; i < k; i++) {
    m[i] = x;
    ms.insert(x);
    if (x < k + 1) {
      s.erase(x);
    }
    x = next(x, b, c, r);
  }
  assert(ms.size() == k);

  for (i = 0; i < k; i++) {
     UnsignedSet::iterator p = s.begin();
     m[k+i] = *p;
     s.erase(p);
     MultiUnsignedSet::iterator q = ms.find(m[i]);
     assert(q != ms.end());
     ms.erase(q);
     if (m[i] < (k + 1) && ms.find(m[i]) == ms.end()) {
       pair<UnsignedSet::iterator, bool> insert_result =
         s.insert(m[i]);
       assert(insert_result.second);
     }
  }
  assert(s.size() == 1);
  m[k*2] = *(s.begin());
  return m[(n - k - 1) % (k + 1) + k];
}

int main() {
  int i, j, t;
  unsigned n, k, a, b, c, r, p;
  unsigned result;

  scanf("%d\n", &t);
  for (i = 1; i <= t; i++) {
    scanf("%u %u\n", &n, &k);
    scanf("%u %u %u %u\n", &a, &b, &c, &r);
    result = last(n, k, a, b, c, r);
    printf("Case #%d: %u\n", i, result);
  }
  return 0;
}
