import java.util.*;
public class Min {
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		long q = s.nextLong();
		for (int cas = 0; cas < q; cas++) {
			long n = s.nextLong(), k = s.nextLong(), a = s.nextLong(),
					b = s.nextLong(), c = s.nextLong(), r = s.nextLong();
			long[] m = new long[(int) (3 * k + 4)];
			m[0] = a;
			for (int i = 1; i < k; i++) {
				m[i] = (b * m[i - 1] + c) % r;
			}
			Map<Long, Integer> count = new HashMap<Long, Integer>();
			TreeSet<Long> avail = new TreeSet<Long>();
			for (long i = 0; i < k + 1; i++) {
				avail.add(i);
			}
			for (int i = 0; i < k; i++) {
				incr(count, m[i]);
				avail.remove(m[i]);
			}
			for (int i = (int) k; i < m.length; i++) {
				m[i] = avail.first();
				avail.remove(m[i]);
				incr(count, m[i]);
				if (decr(count, m[(int) (i - k)]) == 0) {
					avail.add(m[(int) (i - k)]);
				}
			}
			n--;
			while (n >= m.length) {
				n -= (k+1);
			}
//			System.out.println(Arrays.toString(m));
			for (long t = k+1; t + k + 1 < m.length; t++) {
				if (m[(int)t] != m[(int)(t+k+1)]) { System.out.println("OH DEAR"); System.exit(1); }
			}
			System.out.printf("Case #%d: %d\n",cas+1,m[(int) n]);
		}
	}
	public static int incr(Map<Long, Integer> map, long item) {
		int ct;
		if (map.containsKey(item)) {
			ct = map.get(item);
		} else {
			ct = 0;
		}
		map.put(item, ct + 1);
		return ct + 1;
	}

	public static int decr(Map<Long, Integer> map, long item) {
		if (map.containsKey(item)) {
			int ct = map.get(item);
			if (ct - 1 == 0) {
				map.remove(item);
			} else {
				map.put(item, ct - 1);
			}
			return ct - 1;
		} else {
			System.out.println("huh?");
			return 0;
		}
	}
}
