#include <algorithm>
#include <map>
#include <vector>
using namespace std;
#include <iostream>
#include <string>
#include <cstdio>

//By chyx111
#define FORPAIR(a, b, v)\
	for(__typeof__(v.begin()) _it = v.begin(); _it != v.end(); ++_it)\
for(bool _once1 = true, _once2 = true, _done = false; _once1 && _once2; (!_done) ? (_it=v.end(), --_it) : _it )\
for(__typeof__(_it->first) & a = _it->first; _once1 && !(_once1 = false); )\
for(__typeof__(_it->second) & b = _it->second; _once2 && !(_once2 = false); _done = true)
#define ALL(a) (a).begin(), (a).end()
#define SZ(a) ((int)(a).size())
#define DBG(a) do{std::cerr << #a << ": " << (a) << std::endl;}while(0)
#define REP(i,n) for(int n_##__LINE__ = (n), i = 0; i < n_##__LINE__; ++i)
#define FORE(elem,v)\
	for(__typeof__(v.begin()) _it = v.begin(); _it != v.end(); ++_it)\
for(int _once=1, _done=0; _once; (!_done) ? (_it=v.end(), --_it) : _it )\
for(__typeof__(*_it) & elem = * _it; _once && !(_once=0); _done=1)

int main()
{
	int ca;
	scanf("%d", &ca);
	string input;
	getline(cin, input);
	REP(ica, ca){
		getline(cin, input);
		map<int, int> M;
		FORE (ch, input)if(isalpha(ch)){
			M[toupper(ch) - 'A' + 1]++;
		}
		std::vector<int> values;
		FORPAIR (key, value, M){
			values.push_back(value);
		}
		sort(ALL(values));
		reverse(ALL(values));
		int sum = 0;
		REP (i, SZ(values)){
			sum += (26 - i) * values[i];
		}
		printf("Case #%d: %d\n", ica + 1, sum);
	}
	return 0;
}

