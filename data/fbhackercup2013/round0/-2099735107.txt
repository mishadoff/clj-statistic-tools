#include <cstdio>
#include <algorithm>
#include <cstring>
#include <utility>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <iostream>
#include <set>
#include <cmath>

using namespace std;

#define fr(i,a,b) for(int i=a;i<b;++i)
#define rep(i,a) fr(i,0,a)
#define F first
#define S second
#define mp make_pair
#define pb push_back
typedef pair<int,int> pii;
typedef vector<pii> vpii;
typedef vector<int> vi;
typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;







int t, n, k, a, b, c, r, m[300100];
multiset<int> ms;
int cas=1;


void remove(int val){
	multiset<int>::iterator it = ms.find(val);
	ms.erase(it);
}


int main(){
	scanf("%d",&t);
	while(t--){
		ms.clear();
		scanf("%d %d",&n,&k);
		scanf("%d %d %d %d",&a,&b,&c,&r);
		m[0] = a;
		ms.insert(m[0]);
		fr(i,1,k){
			m[i] = (ll(b) * ll(m[i-1]) + ll(c))%r;
			ms.insert(m[i]);
		}
		int pnt = 0;
		fr(i,k,2*k+2){
			if(i != k && m[i-k-1] < pnt && !(ms.count(m[i-k-1]))){
				m[i] = m[i-k-1];
				ms.insert(m[i]);
				remove(m[i-k]);
				continue;
			}
			while(ms.count(pnt)){ 
				pnt++;
			}
			m[i] = pnt;
			ms.insert(m[i]);
			remove(m[i-k]);
		}
		printf("Case #%d: %d\n",cas++,m[(n)%(k+1)+k]);
	}
	return 0;
}































