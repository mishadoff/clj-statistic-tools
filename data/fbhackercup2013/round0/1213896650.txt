//Template

// By Anudeep :)
//Includes
#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;

//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <string> vs;
typedef pair< int ,int > pii;
typedef vector <ll> vll;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)
#define debug 0

//String Utilities 
bool isl(char c) { return (c>='a' && c<='z'); }
bool isu(char c) { return (c>='A' && c<='Z'); }
bool isa(char c) { return (isl(c) || isu(c)); }
bool isn(char c) { return (c>='0' && c<='9'); }
bool isan(char c) { return (isa(c) || isn(c)); }
bool isv(char c) { return (c=='a' || c=='e' || c=='i' || c=='o' || c=='u'); }
string tolow(string s) { rep(i,s.ln) if(isu(s[i])) s[i]=s[i]-'A'+'a'; return s; }
string toup(string s) { rep(i,s.ln) if(isl(s[i])) s[i]=s[i]-'a'+'A'; return s; }

//It all starts here ;)
#define N 100000+25

int K[N];
int main() {
	int t,a,b,c,r,k,n,ans,testno=0;
	scanf("%d",&t);
	while(t--) {
		scanf("%d%d",&n,&k); n--;
		scanf("%d%d%d%d",&a,&b,&c,&r);
		priority_queue < int,vi,greater<int> > q,pre;
		map <int,int> used,times;
		used.clear();
		K[0] = a;
		times[a]++;
		q.push(a);
		for(int i=1;i<k;i++) K[i] = (1LL*b*K[i-1]+c)%r,q.push(K[i]),times[K[i]]++;
		// sort(K,K+k);
		if(debug) {
			printf("%d %d\n",a,K[0]);
			rep(i,k) printf("%d\n",K[i]);
		}
		
		int start = 0,prev=1000000002,tt,placed=0;
		rep(i,k) {
			if(debug) printf("S %d %d\n",start,q.top());
			while(q.empty()==false && start==q.top()) {
				while(q.empty()==false && start==q.top()) q.pop();
				start++;
			}
			
			tt=K[i];
			
			if(debug) printf("Replacing %d,prev is %d, start is %d\n",K[i],prev,start);
			if(start < prev) {
				K[i] = start;
				start++;
			}
			else {
				K[i] = prev;
				pre.pop();
			}
			if(K[i]==k) placed=1;
			
			times[tt]--;
			if(used[tt]==0 && times[tt]==0) {
				used[tt]=1;
				pre.push(tt);
			}
			if(pre.empty()==false)
				prev = pre.top();
			else prev = 1000000002;
		}
		
		if(debug) {
			rep(i,k) printf("%d\n",K[i]);
		}
		
		n -= k;
		ans = -1;
		if(n<k) { ans = K[n]; }
		if(ans == -1 && placed) {
			int inside[N];
			int st=0;
			K[k]=prev;
			while(n>=k) {
				n -= k;
				st--;
				if(K[st+k] == k) {
					break;
				}
			}
			st += (k+1);
			rep(i,k) inside[i] = K[(st+i)%(k+1)];
			rep(i,k) K[i] = inside[i];
			
			if(n<k)
			ans = K[n];
		}
		if(debug) {
			printf("And %d\n",n);
			rep(i,k) printf("%d\n",K[i]);
		}
		while(n>=k) {
			if(n==k) { ans = k; break; }
			n--;
			n -= k;
		}
		if(debug) printf("n is %d %d\n",n,K[n]);
		if(ans==-1) ans = K[n];
		printf("Case #%d: %d\n",++testno,ans);
	}
	return 0;
}