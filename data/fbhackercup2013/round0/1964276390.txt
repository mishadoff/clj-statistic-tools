#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <cfloat>
#include <ctime>
#include <cassert>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <numeric>
#include <list>
#include <iomanip>
#include <fstream>
#include <bitset>
   
using namespace std;
   
 
#define rep(i, n) for (int i = 0; i < (int)(n); ++i)
#define foreach(it, c) for (__typeof__((c).begin()) it=(c).begin(); it != (c).end(); ++it)
#define rforeach(it, c) for (__typeof__((c).rbegin()) it=(c).rbegin(); it != (c).rend(); ++it)
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define CL(arr, val) memset(arr, val, sizeof(arr))
#define COPY(dest, src) memcpy(dest, src, sizeof(dest))
#define ten(n) ((long long)(1e##n))
#define bin(n) (1LL << (n))
#define erep(i, n) for (int i = 0; i <= (int)(n); ++i)
#define revrep(i, n) for (int i = (n); i >= 0; --i)
#define pb push_back

template <class T> void chmax(T& a, const T& b) { a = max(a, b); }
template <class T> void chmin(T& a, const T& b) { a = min(a, b); }
 
template <class T> void uniq(vector<T>& c) { sort(c.begin(), c.end()); c.erase(unique(c.begin(), c.end()), c.end()); }
 
template <class T> string to_s(const T& a) { ostringstream os; os << a; return os.str(); }
template <class T> T to_T(const string& s) { istringstream is(s); T res; is >> res; return res; }
  
template <class T, class U> ostream& operator<<(ostream& os, pair<T, U>& p) { os << "( " << p.first << ", " << p.second << " )"; return os; }
  
template <class T> void print(T a, int n, const string& deli = " ", int br = 1) { for (int i = 0; i < n; ++i) { cout << a[i]; if (i + 1 != n) cout << deli; } while (br--) cout << endl; }
template <class T> void print(const T& c, const string& deli = " ", int br = 1) { foreach (it, c) { cout << *it; if (++it != c.end()) cout << deli;--it; } while (br--) cout << endl; }
template <class T> void print2d(T a, int w, int h, int width = -1, int br = 1) { for (int i = 0; i < h; ++i) { for (int j = 0; j < w; ++j) {    if (width != -1) cout.width(width); cout << a[i][j] << ' '; } cout << endl; } while (br--) cout << endl; }
   
template <class T> void input(T& a, int n) { for (int i = 0; i < n; ++i) cin >> a[i]; }
template <class T> void input(T* a, int n) { for (int i = 0; i < n; ++i) cin >> a[i]; }

void fix_pre(int n) { cout.setf(ios::fixed, ios::floatfield); cout.precision(10); }
void fast_io() { cin.tie(0); ios::sync_with_stdio(false); }
#define trace(x) (cout << #x << ": " << (x) << endl)
 
bool in_rect(int x, int y, int w, int h) { return 0 <= x && x < w && 0 <= y && y < h; }
 

typedef long long ll;
typedef pair<int, int> pint;
 
// y(v): v>^<  y(^): ^>v<
const int dx[] = { 0, 1, 0, -1 };
const int dy[] = { 1, 0, -1, 0 };
  
const double PI = acos(-1.0);
const int mod = ten(9) + 7;

#define F first
#define S second



template <class T>
class BIT
{
public:
    vector<T> a;
    int n;
    BIT(int n) : n(n), a(n + 1) {}
    BIT() { }

    void add(int i, T x)
    {
	++i;
	assert(i > 0);

	while (i <= n)
	{
	    a[i] += x;
	    i += i & -i;
	}
    }

    T sum(int i) const
    {
        ++i;
        T res = 0;
        while (i > 0)
        {
            res += a[i];
            i -= i & -i;
        }
        return res;
    }

    T range_sum(int low, int high) const { return sum(high) - sum(low - 1); }
    T at(int i) const { return sum(i) - sum(i - 1); }
    void assign(int i, T x) { add(i, x - at(i)); }
};
// precondition: all elements are 0 or 1
int find_first_zero(const BIT<int>& bit)
{
    int low = -1, high = bit.n;
    while (high - low > 1)
    {
        int mid = (low + high) / 2;
        if (bit.sum(mid) == mid + 1)
            low = mid;
        else
            high = mid;
    }
    return high;
}
vector<int> gen(int n, int k, ll a, ll b, ll c, ll r)
{
    vector<int> v(n);
    v[0] = a;
    for (int i = 1; i < k; ++i)
        v[i] = (b * v[i - 1] + c) % r;

    const int mv = 3 * k + 100;
    BIT<int> bit(mv + 100);
    map<int, int> cnt;
    rep(i, k)
    {
        ++cnt[v[i]];
        if (v[i] < mv)
            bit.assign(v[i], 1);
    }

    for (int i = k; i < n; ++i)
    {
        v[i] = find_first_zero(bit);

        int out = v[i - k];
        int in = v[i];
        --cnt[out];
        ++cnt[in];
        if (out < mv && cnt[out] == 0)
            bit.assign(out, 0);
        bit.assign(in, 1);
    }

    return v;
}
int solve(int n, int k, ll a, ll b, ll c, ll r)
{
    const int num = 3 * k + 1000;
    vector<int> v = gen(num, k, a, b, c, r);

    --n;
    const int period = k + 1;
    int rebased_n = n - period;
    int peri = rebased_n % period;
    return v[period + peri];
}
int main()
{
    int T;
    cin >> T;
    for (int case_num = 1; case_num <= T; ++case_num)
    {
        int n, k;
        ll a, b, c, r;
        cin >> n >> k;
        cin >> a >> b >> c >> r;

        int res = solve(n, k, a, b, c, r);
        printf("Case #%d: %d\n", case_num, res);
    }
}
