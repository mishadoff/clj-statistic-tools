#include <cstdio>
#include <set>
using namespace std;

#define kmax 100005

int ar[kmax * 2 + 1];


int main() {
	int nCases;
	scanf("%d", &nCases);
	for (int cn = 1; cn <= nCases; cn++) {
		int n, k, a, b, c, r;
		scanf("%d", &n);
		scanf("%d", &k);
		scanf("%d", &a);
		scanf("%d", &b);
		scanf("%d", &c);
		scanf("%d", &r);

		ar[0] = a;
		for (int i = 1; i < k; i++) {
			ar[i] = (int) ( ((long long) b * (long long) ar[i-1] + (long long) c) % (long long) r );
		}

		multiset<int> s;
		set<int> cs;
		for (int i = 0; i <= k; i++) {
			cs.insert(i);
		}
		for (int i = 0; i < k; i++) {
			if (ar[i] <= k) {
				s.insert(ar[i]);
				if (cs.find(ar[i]) != cs.end()) {
					cs.erase(ar[i]);
				}
			}
		}

		for (int i = k; i < 2*k+1; i++) {
			set<int>::iterator iter = cs.begin();
			int v = *iter;
			ar[i] = v;

			cs.erase(iter);
			s.insert(v);
			
			int removedItem = ar[i - k];
			if (removedItem <= k) {
				multiset<int>::iterator iter = s.find(removedItem);
				s.erase(iter);
				if (s.find(removedItem) == s.end()) {
					cs.insert(removedItem);
				}
			}
		}

		int nm = (n-1) % (k+1);
		int ans;
		if (nm == k) {
			ans = ar[k];
		} else {
			ans = ar[k + 1 + nm];
		}
		printf("Case #%d: %d\n", cn, ans);
	}
}
