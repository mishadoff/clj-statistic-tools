#include <iostream>
#include <string>
#include <vector>
#include <cstring>

const int kMaxN = 105;

int Compress(std::string &s, std::vector<int> &p) {
  p.clear();
  for (int i = 0; i < (int)s.size(); ++i) {
    if (s[i] == '(') {
      if (i > 0 && s[i - 1] == ':') {
        p.push_back(2); // :(
      } else {
        p.push_back(0); // (
      }
    } else if (s[i] == ')') {
      if (i > 0 && s[i - 1] == ':') {
        p.push_back(3); // :)
      } else {
        p.push_back(1); // )
      }
    } else if (s[i] != ' ' && s[i] != ':' && !islower(s[i])) {
      return -1;
    }
  }
  return 0;
}

inline bool match(int a, int b) {
  return ((a + b) & 1) == 1;
}

void solve() {
  int t;
  bool f[kMaxN][kMaxN];
  std::vector<int> p;
  std::string s;

  std::cin >> t;
  std::getline(std::cin, s);
  for (int rept = 0; rept < t; ++rept) {
    std::getline(std::cin, s);
    if (Compress(s, p) != 0) {
      std::cout << "Case #" << rept + 1 << ": NO\n";
      continue;
    }
    memset(f, false, sizeof(f));
    for (int i = 1; i < (int)p.size(); ++i) { f[i][i - 1] = true; }
    for (int i = 0; i < (int)p.size(); ++i) { f[i][i] = p[i] > 1; }
    for (int i = 2; i <= (int)p.size(); ++i) {
      for (int left = 0, right = i - 1; left <= (int)p.size() - i;
           ++left, ++right) {
        if (p[right] != 0) {
          for (int k = left + 1; k < right - 1; ++k) {
            f[left][right] |= f[left][k] && f[k + 1][right];
          }
          if (p[right] > 1) {
            f[left][right] |= f[left][right - 1];
          }
          if ((p[right] & 1) == 1) {
            int k;
            for (k = left; k < right && p[k] > 1; ++k) {
              if (p[k] == 2) { f[left][right] |= f[k + 1][right - 1]; }
            }
            if (k < right && p[k] == 0) {
              f[left][right] |= f[k + 1][right - 1];
            }
          }
        }
      }
    }
    std::cout << "Case #" << rept + 1
              << (f[0][p.size() - 1] ? ": YES" : ": NO") << "\n";
  }
}

int main(int argc, char *argv[])
{
  solve();
  return 0;
}
