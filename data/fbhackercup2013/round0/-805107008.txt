#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <sstream>
using namespace std;

#define LL long long
#define LD long double
#define PR pair<int,int>

#define For(i,n) for (i=0; i<int(n); i++)
#define For1(i,n) for (i=1; i<=int(n); i++)
#define ForR(i,n) for (i=int(n)-1; i>=0; i--)
#define ForR1(i,n) for (i=int(n); i>0; i--)
#define Min(a,b) a=min(a, b)
#define Max(a,b) a=max(a, b)
#define Sz(s) int((s).size())
#define All(s) (s).begin(),(s).end()
#define Fill(s,v) memset(s,v,sizeof(s))
#define pb push_back
#define mp make_pair
#define x first
#define y second

template<typename T> T Abs(T x) { return(x<0 ? -x : x); }
template<typename T> T Sqr(T x) { return(x*x); }

const int INF = (int)1e9;
const LD EPS = 1e-9;
const LD PI = acos(-1.0);

int arr[1000000];
map <int,int> M;
set <PR> S;
set <PR>::iterator I,J;

void Insert(int i)
{
	int v=arr[i];
	M[v]=M[v]+1;
		if (M[v]!=1)
			return;
	I=J=S.lower_bound(mp(v,INF)),I--;
		if ((J==S.end()) || ((J->x)>v+1))
		{
				if ((I->y)<v-1)
					S.insert(mp(v,v)); //neither
				else
				{
					S.insert(mp(I->x,v)); //I
					S.erase(I);
				}
			return;
		}
		if ((I->y)<v-1)
		{
			S.insert(mp(v,J->y)); //J
			S.erase(J);
		}
		else
		{
			S.insert(mp(I->x,J->y)); //both
			S.erase(I);
			S.erase(J);
		}
}

void Remove(int i)
{
	int v=arr[i];
	M[v]=M[v]-1;
		if (M[v]!=0)
			return;
	I=S.lower_bound(mp(v,INF)),I--;
		if ((I->x)<v)
			S.insert(mp(I->x,v-1));
		if ((I->y)>v)
			S.insert(mp(v+1,I->y));
	S.erase(I);
}

#define DEBUG 0

int main()
{
		if (DEBUG)
			freopen("in.txt","r",stdin);
		else
		{
			freopen("in2.txt","r",stdin);
			freopen("out.txt","w",stdout);
		}
	//vars
	int T,t;
	int N,K,A,B,C,R;
	int i;
	//testcase loop
	scanf("%d\n",&T);
		For1(t,T)
		{
			//init
			M.clear();
			S.clear();
			S.insert(mp(-1,-1));
			//input
			scanf("%d%d%d%d%d%d",&N,&K,&A,&B,&C,&R),N--;
			N=(K+1)+(N%(K+1));
			//calculate first K values
				For(i,K)
				{
						if (i)
							arr[i]=((LL)B*arr[i-1]+C)%R;
						else
							arr[i]=A;
					Insert(i);
				}
			//calculate remaining values
				for (i=K; i<=N; i++)
				{
					//find first gap
					arr[i]=(S.begin()->y)+1;
					Insert(i);
					//remove earliest element
					Remove(i-K);
				}
			//output
			printf("Case #%d: %d\n",t,arr[N]);
		}
	return(0);
}