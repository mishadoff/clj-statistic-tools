#include <iostream>
#include <sstream>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <numeric>
#include <cstdio> 
#include <cstdlib> 
#include <cmath> 
#include <ctime> 
#include <cstring>
#include <cassert>

using namespace std;

#define REP(i,n) for(int i=0; i<(int)(n); i++)
#define FOR(i,b,e) for(int i=(b); i<(int)(e); i++)
#define EACH(i,c) for(__typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++) 
#define ALL(c) (c).begin(), (c).end()
#define EXIST(c,e) (find(ALL(c), (e)) != (c).end())

#define dump(x) cerr << "  (L" << __LINE__ << ") " << #x << " = " << (x) << endl;
#define dumpv(x) cerr << "  (L" << __LINE__ << ") " << #x << " = "; REP(q,(x).size()) cerr << (x)[q] << " "; cerr << endl;
template<typename T1, typename T2>
ostream& operator<<(ostream& s, const pair<T1, T2>& d) {return s << "(" << d.first << "," << d.second << ")";}

const int MAX_N = 1 << 17;
int n, dat[2 * MAX_N - 1];
int m[100000];
int v[100000];

void init(int n_) {
    n = 1;
    while (n < n_) n *= 2;
    memset(dat, 0, sizeof(dat));
}

void update(int k, int a) {
    k += n-1;
    dat[k] += a;
    while (k > 0) {
        k = (k-1) / 2;
        dat[k] = min(dat[k*2+1], dat[k*2+2]);
    }
}

int query_min_zero(int k) {
    if (k >= n-1) return k - (n-1);

    if (dat[k*2+1] == 0) return query_min_zero(k*2+1);
    else return query_min_zero(k*2+2);
}

int solve(int tgt, int k, int a, int b, int c, int r) {
    init(k+1);
    m[0] = a;
    for (int i = 1; i < k; i++) {
        m[i] = ((long long)b * m[i-1] + c) % r;
    }

    for (int i = 0; i < k; i++) {
        if (m[i] <= k) update(m[i], 1);
    }
    for (int i = 0; i < k; i++) {
        v[i] = query_min_zero(0);
        update(v[i], 1);
        if (m[i] <= k) update(m[i], -1);
    }
    v[k] = query_min_zero(0);

    return v[(tgt - 1 - k) % (k+1)];
}

int main() {
    int T; cin >> T;
    for (int t = 1; t <= T; t++) {
        int n, k, a, b, c, r;
        cin >> n >> k >> a >> b >> c >> r;
        int ans = solve(n, k, a, b, c, r);
        cout << "Case #" << t << ": " << ans << endl;
    }
}
