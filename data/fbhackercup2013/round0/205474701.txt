#include <iostream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <cctype>
#include <vector>
#include <queue>
#include <tr1/unordered_map>
#include <cmath>
#include <map>
#include <bitset>
#include <stack>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef long double real;

///////////////////////////////UTIL/////////////////////////////////
#define ALL(x) (x).begin(),x.end()
#define CLEAR0(v) memset(v, 0, sizeof(v))
#define CLEAR(v, x) memset(v, x, sizeof(v))
#define COPY(a, b) memcpy(a, b, sizeof(a))
#define REP(i,n) for(int i = 0; i<n; i++)
#define REPP(i,a,n) for(int i = a; i<n; i++)
#define REPD(i,n) for(int i = n-1; i>-1; i--)
#define REPDP(i,a,n) for(int i = a; i>-1; i--)
#define pb push_back
#define pf push_front
#define sz size()
#define mp make_pair
/////////////////////////////NUMERICAL//////////////////////////////
#define MOD 100
#define INCMOD(a,b) a = (a+b)%MOD
#define DECMOD(a,b) a = (a+MOD-b)%mod
#define ROUNDINT(a) (int)((double)a + 0.5)
#define INF 2000000000
/////////////////////////////BITWISE////////////////////////////////
#define CHECK(S, j) (S & (1 << j))
#define CHECKFIRST(S) (S & (-S))  //PRECISA DE UMA TABELA PARA TRANSFORMAR EM INDICE
#define SET(S, j) S |= (1 << j)
#define SETALL(S, j) S = (1 << j)-1  //J PRIMEIROS
#define UNSET(S, j) S &= ~(1 << j)
#define TOOGLE(S, j) S ^= (1 << j)
//scanf(" %d ", &t);

int n, k;
long long unsigned int a, b, c, r;

int main(){
	int tc;
	scanf(" %d ", &tc);

	REP(caso, tc){
		scanf(" %d  %d ", &n, &k);
		scanf(" %llu  %llu %llu  %llu ", &a, &b, &c, &r);
		
		tr1::unordered_map<int, int> qnt; 
		int m[101000], i, l;
		
		m[0] = (int) a;
		qnt[m[0]]++;
		l = (m[0] == 0)? 1 : 0;
		
		for(i = 1; i<k; i++){
			m[i] = (int) ((b * m[i-1] + c) % r);
			qnt[m[i]]++;
			if(m[i] == l) l++;
		}

		int pos = 0;
		int count = n%(k+1);
		for(int j = 0; j<count; j++){
			int key = m[pos];
			while(qnt.count(l)) l++;
			qnt[l]++;
			m[pos] = l++;
			if(--qnt[key] == 0){
				qnt.erase(key);
				if(key < l) l = key;
			}
			pos = (pos+1)%k;
		}
		
		while(qnt.count(l)) l++;
		printf("Case #%d: %d\n", caso+1, l);
	}
}
