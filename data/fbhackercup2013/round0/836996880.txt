#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <algorithm>
#include <stack>
#include <iostream>
#include <sstream>
#include <bitset>

using namespace std;

#define inf (1<<29)
#define eps (1e-9)

#define flt(x,y) ((x)<(y)-eps)
#define fgt(x,y) flt(y,x)
#define fle(x,y) !fgt(x,y)
#define fge(x,y) !flt(x,y)
#define feq(x,y) (fabs((x)-(y))<eps)

#define PB push_back
#define MP make_pair

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long LL;
typedef pair<int,int> PII;

int dp[105][105];
char dump[200];

int dfs (int i, int j) {
	if (i > j) return 1;
	if (dp[i][j] != -1) return dp[i][j];
		
	if (dump[i] == ':' && (dump[i+1] == ')' || dump[i+1] == '(')) {
		dp[i][j] = dfs(i+2, j);
		if (dp[i][j] == 1) return 1;
	}
	if (dump[j-1] == ':' && (dump[j] == ')' || dump[j] == '(')) {
		dp[i][j] = dfs(i, j-2);
		if (dp[i][j] == 1) return 1;
	}
	if (dump[i] == '(' && dump[j] == ')') {
		dp[i][j] = dfs(i+1, j-1);
		if (dp[i][j] == 1) return 1;
	}
	for (int k = i; k < j; k++) {
		if (dfs(i, k) == 1 && dfs(k+1, j) == 1) {
			dp[i][j] = 1;
			return 1;
		}
	}
	dp[i][j] = 0;
	return 0;
}

int main()
{
	int T; 
	scanf ("%d", &T);
	fgets(dump, 200, stdin);
	for (int cc = 1; cc <= T; cc++) {
		fgets(dump, 200, stdin);
		memset(dp, -1, sizeof(dp));
		int l = strlen(dump)-1;
		dump[l] = 0;
		if (l == 0) {
			printf ("Case #%d: YES\n", cc);
			continue;
		}
		for (int i = 0; i < l; i++) {
			if (islower(dump[i]) || dump[i] == ' ' || dump[i] == ':') {
				dp[i][i] = 1;
			} else {
				dp[i][i] = 0;
			}
		}
		dfs(0, l-1);
		for (int i = 0; i < l; i++) 
			for(int j = 0; j < l; j++) {
		//		printf ("dp[%d][%d]=%d\n", i, j, dp[i][j]);
			}
		if (dp[0][l-1] == 1) {
			printf ("Case #%d: YES\n", cc);
		} else {
			printf ("Case #%d: NO\n", cc);
		}
	}
	return 0;
}
