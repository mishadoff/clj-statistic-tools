package FHC2013;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.HashSet;

public class FindTheMin {
    public static void main(String[] args) throws Exception {
        BufferedReader in = new BufferedReader(new FileReader(
                "find_the_mintxt"));
        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(
                "out")));
        String line = in.readLine();
        int T = Integer.parseInt(line);
        for (int t = 1; t <= T; t++) {
            String[] nk = in.readLine().split(" ");
            int n = Integer.parseInt(nk[0]), k = Integer.parseInt(nk[1]);
            String[] abcr = in.readLine().split(" ");
            long a = Long.parseLong(abcr[0]), b = Long.parseLong(abcr[1]), c = Long
                    .parseLong(abcr[2]), r = Long.parseLong(abcr[3]);
            long[] array = new long[k];
            array[0] = a;
            for (int i = 1; i < k; i++)
                array[i] = (b * array[i - 1] + c) % r;
            int[] pattern = new int[k + 1];
            int max = k;
            HashSet<Integer> set = new HashSet<Integer>();
            for (int i = k - 1, index = k; i >= 0; i--, index--) {
                while (set.contains(max))
                    max--;
                if (array[i] < max && !set.contains((int) array[i])) {
                    pattern[index] = (int) array[i];
                    set.add((int) array[i]);
                }
                else {
                    pattern[index] = max;
                    set.add(max);
                    max--;
                }
            }
            for (int i = 0; i <= k; i++)
                if (!set.contains(i)) {
                    pattern[0] = i;
                    break;
                }
            int num = 0;
            n--;
            if (n < k)
                num = (int) array[n];
            else {
                n -= k;
                n %= (k + 1);
                num = pattern[n];
            }
            out.println("Case #" + t + ": " + num);
        }
        in.close();
        out.close();
    }
}
