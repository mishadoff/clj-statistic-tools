#include <functional>/*{{{*/
#include <algorithm>
#include <iostream>
#include <sstream>
#include <numeric>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <string>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
#include <deque>
#include <cmath>
#include <stack>
#include <list>
#include <map>
#include <set>
using namespace std;typedef long long ll;typedef long double real;void run();int main(){ios::sync_with_stdio(0);run();}/*}}}*/

int ok[128][128];
string s;

bool check(int l,int r){
  if (l>=r) return l==r; else if (!~ok[l][r]){
    ok[l][r]=0;
    for (int i=l+1; i<r; i++){
      ok[l][r]|=(check(l,i) and check(i,r));
    }
    if (r-l>=2){
      ok[l][r]|=(s[l+0]==':' and (s[l+1]==')' or s[l+1]=='(') and check(l+2,r));
      ok[l][r]|=(s[r-2]==':' and (s[r-1]==')' or s[r-1]=='(') and check(l,r-2));
      ok[l][r]|=(s[l+0]=='(' and s[r-1]==')' and check(l+1,r-1));
    }
    if (r-l>=1){
      ok[l][r]|=((s[l+0]>='a' and s[l+0]<='z' or s[l+0]==' ' or s[l+0]==':') and check(l+1,r));
      ok[l][r]|=((s[r-1]>='a' and s[r-1]<='z' or s[r-1]==' ' or s[r-1]==':') and check(l,r-1));
    }
  }
  return ok[l][r];
}

void run(){
  int tsts; cin>>tsts; getline(cin,s); for (int tst=1; tst<=tsts; ++tst){
    memset(ok,-1,sizeof ok);
    getline(cin,s); int const n=s.size(); for (int i=n; i--;) ok[i][i]=1;
    cout<<"Case #"<<tst<<": "<<(check(0,n)?"YES":"NO")<<endl;
  }
}

