#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <deque>
#include <cassert>
using namespace std;

#define MP make_pair
#define PB push_back
#define rep( i , a , b )  for( int i = (a) ;   i <= (b) ; ++i)
#define foreach(c , itr) for(__typeof((c).begin()) itr = (c).begin(); itr != (c).end(); ++itr)
#define SZ(x) (int)x.size()
#define LEN(x) (int)x.length()

int data[2*100000+100] ;

int x[ 100000+100]; 
int tree[(100000+100)<<3]; 

#define L(x) ((x)<<1)
#define R(x) (L(x)+1)

int N ; 
void build ( int rt, int l, int r){ 
    if( l == r ) { 
        tree[rt] = x[l]?1:0;
        return;
    }
    int mid = ( l + r ) >> 1;  
    build( L(rt) , l ,mid) ; 
    build( R(rt) , mid+1, r ) ;
    tree[rt]=tree[L(rt)] + tree[R(rt)];
}

int ask( int rt, int l, int r){
   if( l == r ){ 
       return l; 
   }
   int mid = ( l + r ) >> 1; 
   if( tree[L(rt)] == mid-l+1) {
       return ask(R(rt),mid+1,r); 
   }
   return ask(L(rt),l,mid); 
}

void ins( int rt ,int l, int r, int now,int val ){ 
    if( l == r ){ 
        x[l] += val; 
        tree[rt] = x[l]?1:0;
        return ;
    }
    int mid = ( l + r ) >> 1;  
    if( now <= mid ) ins(L(rt),l,mid,now,val) ;
    else ins(R(rt),mid+1,r,now,val) ; 
    tree[rt] = tree[L(rt)]+ tree[R(rt) ]; 
}

int main (){

    freopen("c.in","r",stdin ) ; 
    freopen("c.out","w",stdout ) ; 
    int T ; 
    cin >> T ; 
    for( int Cas = 1 ; Cas <= T ; ++Cas){ 

        int n,k; 
        cin >> n >> k ;  
        int a,b,c,r; 
        cin >> a >> b >> c >> r ;  
        data[0]=a; 
       // cout << 0 << " " << a << endl ;
        for(int i=1; i < k ; ++i){
            data[i] = ( 1LL*b*data[i-1] + c ) % r ;          
        }
        cout <<"Case #"<<Cas<<": "; 
        if( n <= k ){ 
            cout << data[n-1] << endl ; 
            continue; 
        }
        N = k + 5 ;  
        for(int i=0; i <=N ; ++i){ 
            x[ i ] = 0 ;
        }

        for(int i= 0 ; i < k ; ++i){
            if( data[i] >= N ) continue; 
            ++x[data[i]+1];
        }

        build(1,1,N) ;  
        
        for(int i=k; i <2*k +2; ++i){  

            data[i] = ask( 1,1,N) -1 ;  
           // cout << i << " "<<data[i] << endl;
           /* bool used[1000+10]; 
            memset(used,0,sizeof(used)) ; 
            for(int j=i-1; j >= i - k ; --j){ 
                used[ data[j] ] =1 ; 
            }
            int t=0;
            for(int j=0; ; ++j){
                if(!used[j]){ 
                    t = j ;
                    break; 
                }
            }
            assert(t == data[i] ) ; 
            */
            if( data[i-k] + 1 <= N ){ 
                ins( 1, 1, N , data[i-k]+1,-1) ; 
            }
            ins( 1, 1, N , data[i] + 1 , 1 ) ; 
        }

        cout <<data[ k + (n-k-1)%(k+1) ] << endl ; 
    }
    return 0; 
}
