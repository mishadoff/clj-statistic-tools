#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <string.h>
#include <set>
#include <queue>
#include <map>
#include <stack>
#include <fstream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <assert.h>
using namespace std;

typedef long long ll;

#define f first
#define s second
#define mk make_pair
#define pii pair<int,int>

const int maxk = 100000 + 55;

int k,n;
int m[maxk];

void gen(int m[], int a, int b, int c, int k, int r) {
    m[0] = a;
    for (int i = 1; i < k; ++i) {
        m[i] = (b*(ll)m[i-1]+c) % r;
    }
}

int tmp[maxk];

int main() {
    freopen("Ulaz.txt","r",stdin);
    freopen("Izlaz.txt","w",stdout);
    int tests; scanf("%d",&tests);
    for (int t = 1; t <= tests; ++t) {
        scanf("%d%d",&n,&k);
        int a,b,c,r; scanf("%d%d%d%d",&a,&b,&c,&r);
        memset(m, 0, sizeof(m));
        gen(m,a,b,c,k,r);


        map<int,int>used;
        for (int i = 0; i < k; ++i)
            used[m[i]]++;
        priority_queue<int> pq;
        for (int i = 0; i <= k; ++i)
            if (used[i] == 0) pq.push(-i);

        int i;
        for (i = k; i < n; ++i) {

            while (used[-pq.top()]) pq.pop();
            int j = -pq.top(); pq.pop();

            m[i] = j;
            used[j]++;
            used[m[i-k]]--;
            if (used[m[i-k]] == 0) pq.push(-m[i-k]);

            if (j == k) {
                i++;
                break;
            }
        }
        i--;

        for (int j = 0; j <= k; ++j)
            tmp[k-j] = m[i-j];


        int moveLeft = (n-1) - i;

        printf("Case #%d: %d\n",t,tmp[(k+moveLeft)%(k+1)]);
    }
    return 0;
}
