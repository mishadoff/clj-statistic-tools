#include <cstring>
#include <iostream>
#include <queue>
#include <vector>

#define MIN(a, b) (((a) < (b)) ? (a) : (b))

using namespace std;

struct pq {
  pq() : curr_size(0) {}
  void clear() {
    curr_size = 0;
  }
  void push(int i) {
    arr[++curr_size] = i;

    int t = curr_size;
    while (t > 0) {
      if (arr[t] < arr[t/2]) {
        int temp = arr[t];
        arr[t] = arr[t/2];
        arr[t/2] = temp;
      } else {
        break;
      }
      t /= 2;
    }
  }
  int pop() {
    int ans = arr[1];
    arr[1] = arr[curr_size--];
    int t = 1;
    while (true) {
      if (2*t+1 <= curr_size+1) { // both children valid
        if (arr[t] <= arr[2*t] && arr[t] <= arr[2*t+1]) break;
        if (arr[2*t] < arr[2*t+1]) {
          int temp = arr[t];
          arr[t] = arr[2*t];
          arr[2*t] = temp;
          t = 2*t;
        } else {
          int temp = arr[t];
          arr[t] = arr[2*t+1];
          arr[2*t+1] = temp;
          t = 2*t+1;
        }
      } else if (2*t <= curr_size + 1) { // one child valid
        if (arr[t] <= arr[2*t]) break;
        int temp = arr[t];
        arr[t] = arr[2*t];
        arr[2*t] = temp;
        t = 2*t;
      } else { // no children valid
        break;
      }
    }
    return ans;
  }
  int arr[100005];
  int curr_size;
};

int main() {
  int t; cin >> t;
  pq curr;
  for (int ca = 1; ca <= t; ++ca) {
    long long n, k, a, b, c, r;
    cin >> n >> k >> a >> b >> c >> r;
    n %= (k+1);

    curr.clear();
    int count[100005];
    memset(count, 0, sizeof(count));

    vector<long long> bad(k);
    bad[0] = a;
    for (int i = 1; i < k; ++i) {
      bad[i] = (b * bad[i-1] + c) % r;
    }
    for (int i = 0; i < k; ++i) {
      bad[i] = MIN(bad[i], k);
      count[bad[i]]++;
    }

    for (int i = 0; i <= k; ++i) {
      if (count[i] == 0) curr.push(i);
    }

    int answer = 0;
    for (int i = 0; i <= k; ++i) {
      int next = curr.pop();

      if (i == n) {
        answer = next;
        break;
      }

      count[bad[i]]--;
      if (count[bad[i]] == 0) curr.push(bad[i]);
    }

    cout << "Case #" << ca << ": " << answer << endl;
  }
  return 0;
}