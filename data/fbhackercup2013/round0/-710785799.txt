#include <iostream>
#include <functional>
#include <map>
#include <queue>
#define fu(i, n) for (int i = 0; i < n; i++)
using namespace std;
typedef long long ll;

ll n, k, a, b, c, r;
map<ll, ll> stat;

void update(ll x) {
  if (x <= k)
    stat[x]++;
}

ll answer() {
  queue<ll> buffer;
  priority_queue<ll, vector<ll>, greater<ll> > pool;
  stat.clear();

  buffer.push(a);
  update(a);
  fu(i, k-1) {
    buffer.push((buffer.back()*b+c)%r);
    update(buffer.back());
  }
  fu(i, k+1)
    if (stat.find(i) == stat.end())
      pool.push(i);

  while (pool.size() > 1) {
    if (n == 0) return buffer.front();
    ll x = pool.top(), y = buffer.front();
    pool.pop();
    buffer.push(x);
    update(x);
    if (stat[y] == 1)
      pool.push(y);
    buffer.pop();
    stat[y]--;
    n--;
  }
  n %= k+1;
  fu(i, n-1) buffer.pop();
  return buffer.front();
}

int main() {
  int T;
  cin >> T;
  fu(t, T) {
    cin >> n >> k >> a >> b >> c >> r;
    cout << "Case #" << t+1 << ": " << answer() << endl;
  }
}
