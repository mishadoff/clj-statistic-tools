#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <set>

using namespace std;
typedef long long LL;

int solve(LL n, LL k, LL a, LL b, LL c, LL r){
    vector<LL> m(k+1);
    set<LL> q;
    vector<int> counts(k+1, 0);
    m[0] = a;
    for(int i = 1; i < k; i++){
        m[i] = (b * m[i-1] + c) % r;
    }
    for(int i = 0; i < k; i++){
        if(m[i] <= k) counts[m[i]]++;
    }
    for(int i = 0; i <= k; i++){
        if(counts[i] == 0) q.insert(i);
    }
    m[k] = *q.begin();
    q.erase(q.begin());
    //cerr << k << ":" << m[k] << endl;
    if(k+1 == n) return m[k];
    for(int i = 0; i < k; i++){
        LL v = m[i];
        if(v <= k){
            counts[v]--;
            if(counts[v] <= 0){
                q.insert(v);
                counts[v]++;
            }
        }
        assert(q.size() > 0);
        m[i] = *q.begin();
        //cerr << i << ":" << v << " <= "<< m[i] << endl;
        if(k+1+i == n-1) return m[i];
        q.erase(q.begin());
    }
    return m[(n-1) % (k+1)];
}


int main(){
    int T;
    cin >> T;
    for(int t = 1; t <= T; t++){
        int n, k, a, b, c, r;
        cin >> n >> k >> a >> b >> c >> r;
        //cerr << "n=" << n << ", k=" << k << ", a=" << a << ", b=" << b << ", c=" << c << ", r=" << r << endl;
        LL res = solve(n, k, a, b, c, r);
        cout << "Case #" << t << ": " << res << endl;
    }
    return 0;
}

