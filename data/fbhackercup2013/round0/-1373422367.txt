import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.TreeSet;

public class FindTheMin {
	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(new File("third.in"));
		BufferedWriter writer = new BufferedWriter(new FileWriter(new File("third_out.out")));
		int numTests;
		numTests = sc.nextInt();
		for (int o = 0; o < numTests; o++) {
			int n, k, a, b, c, r;
			n = sc.nextInt();
			k = sc.nextInt();
			a = sc.nextInt();
			b = sc.nextInt();
			c = sc.nextInt();
			r = sc.nextInt();
			TreeSet<Integer> s = new TreeSet<Integer>();
			for (int i = 0; i < k + 1; i++) {
				s.add(i);
			}
			int [] m = new int [2 * k + 1];
			int [] cnt = new int [k + 1];
			m[0] = a;
			for (int i = 1; i < k; i++) {
				m[i] = (int)(((long)b * (long)m[i - 1] + (long)c) % (long)r);
				if (m[i] <= k) {
					cnt[m[i]]++;
				}
				if (s.contains(m[i])) {
					s.remove(m[i]);
				}
			}
			for (int i = 0; i < k + 1; i++) {
				
				m[i + k] = s.first();
				s.remove(m[i + k]);
				cnt[m[i + k]]++;
				if (m[i] <= k) {
					cnt[m[i]]--;
					if (cnt[m[i]] == 0) {
						s.add(m[i]);
					}
				}
				
			}
			n = (n - k - 1) % (k + 1);
			writer.append(String.format("Case #%d: %d\n", o + 1, m[k + n]));
		}
		writer.flush();
		writer.close();
	}
}
