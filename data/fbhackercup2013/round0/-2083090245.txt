#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string>
#include <cstring>
#include <fstream>
#include <cassert>
using namespace std;

#define all(o) (o).begin(), (o).end()
#define allr(o) (o).rbegin(), (o).rend()
const int INF = 2147483647;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
typedef vector<vi> vvi;
typedef vector<vii> vvii;
template <class T> int size(T x) { return x.size(); }

// assert or gtfo

map<ii, bool> mem;
string s;

bool valid(int n, int open)
{
	if (n < 0) return open == 0;
	ii cur(n, open);
	if (mem.find(cur) != mem.end()) return mem[cur];
	if (s[n] != '(' && s[n] != ')') return mem[cur] = valid(n - 1, open);

	if (s[n] == ')')
	{
		bool ok = false;
		if (n - 1 >= 0 && s[n-1] == ':')
		{
			ok = ok || valid(n - 2, open);
		}

		ok = ok || valid(n - 1, open + 1);
		return mem[cur] = ok;
	}
	else if (s[n] == '(')
	{
		bool ok = false;
		if (n - 1 >= 0 && s[n-1] == ':')
		{
			ok = ok || valid(n - 2, open);
		}

		ok = ok || (open > 0 && valid(n - 1, open - 1));
		return mem[cur] = ok;
	}
	else assert(false);
}

int main()
{
	int ts;
	scanf("%d\n", &ts);
	for (int t = 0; t < ts; t++)
	{
		mem.clear();
		getline(cin, s);
		printf("Case #%d: %s\n", t+1, valid(size(s) - 1, 0) ? "YES" : "NO");
	}
	return 0;
}